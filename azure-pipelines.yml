# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include: 
      - main
  paths:
    exclude:
    - README.md
pr:
  branches:
    include:
      - main
  paths:
    exclude:
    - README.md

pool:
  vmImage: 'windows-latest'

variables:
  isRelease: False
  isPrerelease: False
  projectVersion: 
  
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main')  }}:
    isMain: true
    buildConfiguration: 'Release'
  ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/main')  }}:
    isMain: false
    buildConfiguration: 'Debug'
  
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/')  }}:
    releaseBuild: $[eq(variables['System.PullRequest.TargetBranch'], 'main')]
    isPullRequest: True
    isAlphaRelease: $[eq(variables['System.PullRequest.TargetBranch'], 'main')]
  ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/pull/'))  }}:
    releaseBuild: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
    isPullRequest: False
    isAlphaRelease: False

steps:

- task: Bash@3
  displayName: 'Get Version from version.props'
  inputs:
    targetType: 'inline'
    script: |
      PROJECT_VERSION_PREFIX="$(grep '<VersionPrefix>' < version.props | sed 's/.*<VersionPrefix>\(.*\)<\/VersionPrefix>/\1/')"
      PROJECT_VERSION_SUFFIX="$(grep '<VersionSuffix>' < version.props | sed 's/.*<VersionSuffix>\(.*\)<\/VersionSuffix>/\1/')"
      echo "##vso[task.setvariable variable=projectVersionPrefix]$PROJECT_VERSION_PREFIX"
      echo "##vso[task.setvariable variable=projectVersionSuffix]$PROJECT_VERSION_SUFFIX"
      if [ $ISALPHARELEASE == "False" ]; then 
        if [ -n "$PROJECT_VERSION_SUFFIX" ]; then 
          echo "##vso[task.setvariable variable=isPrerelease]True"
          echo "##vso[task.setvariable variable=projectVersion]$PROJECT_VERSION_PREFIX-$PROJECT_VERSION_SUFFIX"
        else
          echo "##vso[task.setvariable variable=isRelease]True"
          echo "##vso[task.setvariable variable=projectVersion]$PROJECT_VERSION_PREFIX"
        fi
      else
        echo "##vso[task.setvariable variable=projectVersionSuffix]alpha-$(Build.BuildNumber)"
        echo "##vso[task.setvariable variable=projectVersion]$PROJECT_VERSION_PREFIX-alpha-$(Build.BuildNumber)"
      fi
  
- task: Bash@3
  condition: true
  displayName: 'Log pipeline configuration'
  inputs:
    targetType: 'inline'
    script: |
      echo "Source Branch: $(Build.SourceBranch)"
      echo "Is Pull Request: $(isPullRequest)"
      [ "$(isPullRequest)" == "True" ] && echo "Pull Request Source: $(System.PullRequest.SourceBranch)" && echo "Pull Request Target: $(System.PullRequest.TargetBranch)"
      echo "Release Build: $(releaseBuild)"
      echo "Stable release: $(isRelease)"
      echo "Prerelease: $(isPrerelease)"
      echo "Alpha: $(isAlphaRelease)"
      echo "Build Configuration: $(buildConfiguration)"
      echo "Build Version: $(projectVersion)"
  

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.sln'
  displayName: 'Restore packages'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.sln'
    arguments: '--configuration $(buildConfiguration) --no-restore /property:VersionSuffix="$(projectVersionSuffix)"'
  displayName: 'Build'

- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '**/*.sln'
    arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    publishTestResults: true
    nobuild: true
  displayName: 'Run Tests'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

- task: DotNetCoreCLI@2
  condition: and(succeeded(), eq(variables.releaseBuild, true))
  inputs:
    command: 'custom'
    custom: 'pack'
    projects: '**/*.sln'
    arguments: '--configuration $(buildConfiguration) --no-restore --no-build --output $(Build.ArtifactStagingDirectory) --version-suffix="$(projectVersionSuffix)"'
  displayName: 'Create package'

- task: GitHubRelease@1
  displayName: Create Github release
  condition: and(succeeded(), eq(variables.releaseBuild, true), or(eq(variables.isRelease, true),eq(variables.isPrerelease, true)))
  inputs:
    gitHubConnection: 'github.com_nsarris'
    repositoryName: 'nsarris/ParallelTasks'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: 'v$(projectVersion)'
    title: 'v$(projectVersion)'
    releaseNotesSource: 'inline'
    isPreRelease: $(isPrerelease)
    addChangeLog: false

- task: NuGetAuthenticate@0
  condition: and(succeeded(), eq(variables.releaseBuild, true))
  displayName: 'NuGet Authenticate'

- task: NuGetCommand@2
  displayName: Nuget Push (Alpha feed)
  condition: and(succeeded(), eq(variables.releaseBuild, true), eq(variables.isAlphaRelease, true))
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'd28ddf80-d960-4000-806a-ea62ac4ea474'
    allowPackageConflicts: true

- task: NuGetCommand@2
  displayName: Nuget Push (Release feed)
  condition: and(succeeded(), eq(variables.releaseBuild, true), or(eq(variables.isRelease, true), eq(variables.isPrerelease, true)))
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'nuget.org_nsarris'
