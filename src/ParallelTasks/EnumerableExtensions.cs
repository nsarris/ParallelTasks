using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace ParallelTasks
{
    public static class EnumerableExtensions
    {
        #region WhenAll

        /// <summary>
        /// Returns a task that completes when all the tasks generated by appliying the given function on each element of the enumerable source completes.
        /// </summary>
        /// <typeparam name="TSource">The element type of the source enumerable.</typeparam>
        /// <param name="source">The enumerable collection of source elements.</param>
        /// <param name="operation">The operation to apply on each element.</param>
        /// <param name="cancellationToken">The cancellation token that is passed to each operation.</param>
        /// <returns>Task of ISourcedTaskResult items, one for each input element.</returns>
        public static Task<IEnumerable<ISourcedTaskResult<TSource>>> WhenAllAsync<TSource>(this IEnumerable<TSource> source, Func<TSource, CancellationToken, Task> operation, CancellationToken cancellationToken)
            => source.ToNamedTaskFactories(operation).WhenAll(cancellationToken, ParallelismOptions.DefaultDegreeOfParallelism);

        /// <summary>
        /// Returns a task that completes when all the tasks generated by appliying the given function on each element of the enumerable source completes.
        /// </summary>
        /// <typeparam name="TSource">The element type of the source enumerable.</typeparam>
        /// <typeparam name="TResult">The return type of the operation applied on each element.</typeparam>
        /// <param name="source">The enumerable collection of source elements.</param>
        /// <param name="operation">The operation to apply on each element.</param>
        /// <param name="cancellationToken">The cancellation token that is passed to each operation.</param>
        /// <returns>Task of ISourcedTaskResult items, one for each input element.</returns>
        public static Task<IEnumerable<ISourcedTaskResult<TSource, TResult>>> WhenAllAsync<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, CancellationToken, Task<TResult>> operation, CancellationToken cancellationToken)
            => source.ToNamedTaskFactories(operation).WhenAll(cancellationToken, ParallelismOptions.DefaultDegreeOfParallelism);

        /// <summary>
        /// Returns a task that completes when all the tasks generated by appliying the given function on each element of the enumerable source completes.
        /// </summary>
        /// <typeparam name="TSource">The element type of the source enumerable.</typeparam>
        /// <param name="source">The enumerable collection of source elements.</param>
        /// <param name="operation">The operation to apply on each element.</param>
        /// <returns>Task of ISourcedTaskResult items, one for each input element.</returns>
        public static Task<IEnumerable<ISourcedTaskResult<TSource>>> WhenAllAsync<TSource>(this IEnumerable<TSource> source, Func<TSource, Task> operation)
            => source.ToNamedTaskFactories(operation).WhenAll(CancellationToken.None, ParallelismOptions.DefaultDegreeOfParallelism);

        /// <summary>
        /// Returns a task that completes when all the tasks generated by appliying the given function on each element of the enumerable source completes.
        /// </summary>
        /// <typeparam name="TSource">The element type of the source enumerable.</typeparam>
        /// <typeparam name="TResult">The return type of the operation applied on each element.</typeparam>
        /// <param name="source">The enumerable collection of source elements.</param>
        /// <param name="operation">The operation to apply on each element.</param>
        /// <returns>Task of ISourcedTaskResult items, one for each input element.</returns>
        public static Task<IEnumerable<ISourcedTaskResult<TSource, TResult>>> WhenAllAsync<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, Task<TResult>> operation)
            => source.ToNamedTaskFactories(operation).WhenAll(CancellationToken.None, ParallelismOptions.DefaultDegreeOfParallelism);

        /// <summary>
        /// Returns a task that completes when all the tasks generated by appliying the given function on each element of the enumerable source completes.
        /// </summary>
        /// <typeparam name="TSource">The element type of the source enumerable.</typeparam>
        /// <param name="source">The enumerable collection of named source elements represented as a (string, TSource) Tuple.</param>
        /// <param name="operation">The operation to apply on each element.</param>
        /// <param name="cancellationToken">The cancellation token that is passed to each operation.</param>
        /// <returns>Task of ISourcedTaskResult items, one for each input element.</returns>
        public static Task<IEnumerable<ISourcedTaskResult<TSource>>> WhenAllAsync<TSource>(this IEnumerable<(string name, TSource value)> source, Func<TSource, CancellationToken, Task> operation, CancellationToken cancellationToken)
            => source.ToNamedTaskFactories(operation).WhenAll(cancellationToken, ParallelismOptions.DefaultDegreeOfParallelism);

        /// <summary>
        /// Returns a task that completes when all the tasks generated by appliying the given function on each element of the enumerable source completes.
        /// </summary>
        /// <typeparam name="TSource">The element type of the source enumerable.</typeparam>
        /// <typeparam name="TResult">The return type of the operation applied on each element.</typeparam>
        /// <param name="source">The enumerable collection of named source elements represented as a (string, TSource) Tuple.</param>
        /// <param name="operation">The operation to apply on each element.</param>
        /// <param name="cancellationToken">The cancellation token that is passed to each operation.</param>
        /// <returns>Task of ISourcedTaskResult items, one for each input element.</returns>
        public static Task<IEnumerable<ISourcedTaskResult<TSource, TResult>>> WhenAllAsync<TSource, TResult>(this IEnumerable<(string name, TSource value)> source, Func<TSource, CancellationToken, Task<TResult>> operation, CancellationToken cancellationToken)
            => source.ToNamedTaskFactories(operation).WhenAll(cancellationToken, ParallelismOptions.DefaultDegreeOfParallelism);

        /// <summary>
        /// Returns a task that completes when all the tasks generated by appliying the given function on each element of the enumerable source completes.
        /// </summary>
        /// <typeparam name="TSource">The element type of the source enumerable.</typeparam>
        /// <param name="source">The enumerable collection of named source elements represented as a (string, TSource) Tuple.</param>
        /// <param name="operation">The operation to apply on each element.</param>
        /// <returns>Task of ISourcedTaskResult items, one for each input element.</returns>
        public static Task<IEnumerable<ISourcedTaskResult<TSource>>> WhenAllAsync<TSource>(this IEnumerable<(string name, TSource value)> source, Func<TSource, Task> operation)
            => source.ToNamedTaskFactories(operation).WhenAll(CancellationToken.None, ParallelismOptions.DefaultDegreeOfParallelism);

        /// <summary>
        /// Returns a task that completes when all the tasks generated by appliying the given function on each element of the enumerable source completes.
        /// </summary>
        /// <param name="source">The enumerable collection of named source elements represented as a (string, TSource) Tuple.</param>
        /// <typeparam name="TResult">The return type of the operation applied on each element.</typeparam>
        /// <param name="source">The enumerable collection of source elements.</param>
        /// <param name="operation">The operation to apply on each element.</param>
        /// <returns>Task of ISourcedTaskResult items, one for each input element.</returns>
        public static Task<IEnumerable<ISourcedTaskResult<TSource, TResult>>> WhenAllAsync<TSource, TResult>(this IEnumerable<(string name, TSource value)> source, Func<TSource, Task<TResult>> operation)
            => source.ToNamedTaskFactories(operation).WhenAll(CancellationToken.None, ParallelismOptions.DefaultDegreeOfParallelism);

        /// <summary>
        /// Returns a task that completes when all the tasks generated by appliying the given function on each element of the enumerable source completes.
        /// </summary>
        /// <typeparam name="TSource">The element type of the source enumerable.</typeparam>
        /// <param name="source">The enumerable collection of source elements.</param>
        /// <param name="operation">The operation to apply on each element.</param>
        /// <param name="cancellationToken">The cancellation token that is passed to each operation.</param>
        /// <param name="degreeOfParallelism">The maxium number of concurrently executed parallel tasks.</param>
        /// <returns>Task of ISourcedTaskResult items, one for each input element.</returns>
        public static Task<IEnumerable<ISourcedTaskResult<TSource, TResult>>> WhenAllAsync<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, CancellationToken, Task<TResult>> operation, CancellationToken cancellationToken, int degreeOfParallelism)
            => source.ToNamedTaskFactories(operation).WhenAll(cancellationToken, degreeOfParallelism);

        /// <summary>
        /// Returns a task that completes when all the tasks generated by appliying the given function on each element of the enumerable source completes.
        /// </summary>
        /// <typeparam name="TSource">The element type of the source enumerable.</typeparam>
        /// <typeparam name="TResult">The return type of the operation applied on each element.</typeparam>
        /// <param name="source">The enumerable collection of source elements.</param>
        /// <param name="operation">The operation to apply on each element.</param>
        /// <param name="cancellationToken">The cancellation token that is passed to each operation.</param>
        /// <param name="degreeOfParallelism">The maxium number of concurrently executed parallel tasks.</param>
        /// <returns>Task of ISourcedTaskResult items, one for each input element.</returns>
        public static Task<IEnumerable<ISourcedTaskResult<TSource>>> WhenAllAsync<TSource>(this IEnumerable<TSource> source, Func<TSource, CancellationToken, Task> operation, CancellationToken cancellationToken, int degreeOfParallelism)
            => source.ToNamedTaskFactories(operation).WhenAll(cancellationToken, degreeOfParallelism);

        /// <summary>
        /// Returns a task that completes when all the tasks generated by appliying the given function on each element of the enumerable source completes.
        /// </summary>
        /// <typeparam name="TSource">The element type of the source enumerable.</typeparam>
        /// <param name="source">The enumerable collection of source elements.</param>
        /// <param name="operation">The operation to apply on each element.</param>
        /// <param name="degreeOfParallelism">The maxium number of concurrently executed parallel tasks.</param>
        /// <returns>Task of ISourcedTaskResult items, one for each input element.</returns>
        public static Task<IEnumerable<ISourcedTaskResult<TSource, TResult>>> WhenAllAsync<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, Task<TResult>> operation, int degreeOfParallelism)
            => source.ToNamedTaskFactories(operation).WhenAll(CancellationToken.None, degreeOfParallelism);

        /// <summary>
        /// Returns a task that completes when all the tasks generated by appliying the given function on each element of the enumerable source completes.
        /// </summary>
        /// <typeparam name="TSource">The element type of the source enumerable.</typeparam>
        /// <param name="source">The enumerable collection of source elements.</param>
        /// <param name="operation">The operation to apply on each element.</param>
        /// <param name="degreeOfParallelism">The maxium number of concurrently executed parallel tasks.</param>
        /// <returns>Task of ISourcedTaskResult items, one for each input element.</returns>
        public static Task<IEnumerable<ISourcedTaskResult<TSource>>> WhenAllAsync<TSource>(this IEnumerable<TSource> source, Func<TSource, Task> operation, int degreeOfParallelism)
            => source.ToNamedTaskFactories(operation).WhenAll(CancellationToken.None, degreeOfParallelism);

        /// <summary>
        /// Returns a task that completes when all the tasks generated by appliying the given function on each element of the enumerable source completes.
        /// </summary>
        /// <typeparam name="TSource">The element type of the source enumerable.</typeparam>
        /// <param name="source">The enumerable collection of named source elements represented as a (string, TSource) Tuple.</param>
        /// <param name="operation">The operation to apply on each element.</param>
        /// <param name="cancellationToken">The cancellation token that is passed to each operation.</param>
        /// <param name="degreeOfParallelism">The maxium number of concurrently executed parallel tasks.</param>
        /// <returns>Task of ISourcedTaskResult items, one for each input element.</returns>
        public static Task<IEnumerable<ISourcedTaskResult<TSource, TResult>>> WhenAllAsync<TSource, TResult>(this IEnumerable<(string name, TSource value)> source, Func<TSource, CancellationToken, Task<TResult>> operation, CancellationToken cancellationToken, int degreeOfParallelism)
            => source.ToNamedTaskFactories(operation).WhenAll(cancellationToken, degreeOfParallelism);

        /// <summary>
        /// Returns a task that completes when all the tasks generated by appliying the given function on each element of the enumerable source completes.
        /// </summary>
        /// <typeparam name="TSource">The element type of the source enumerable.</typeparam>
        /// <typeparam name="TResult">The return type of the operation applied on each element.</typeparam>
        /// <param name="source">The enumerable collection of named source elements represented as a (string, TSource) Tuple.</param>
        /// <param name="operation">The operation to apply on each element.</param>
        /// <param name="cancellationToken">The cancellation token that is passed to each operation.</param>
        /// <param name="degreeOfParallelism">The maxium number of concurrently executed parallel tasks.</param>
        /// <returns>Task of ISourcedTaskResult items, one for each input element.</returns>
        public static Task<IEnumerable<ISourcedTaskResult<TSource>>> WhenAllAsync<TSource>(this IEnumerable<(string name, TSource value)> source, Func<TSource, CancellationToken, Task> operation, CancellationToken cancellationToken, int degreeOfParallelism)
            => source.ToNamedTaskFactories(operation).WhenAll(cancellationToken, degreeOfParallelism);

        /// <summary>
        /// Returns a task that completes when all the tasks generated by appliying the given function on each element of the enumerable source completes.
        /// </summary>
        /// <typeparam name="TSource">The element type of the source enumerable.</typeparam>
        /// <param name="source">The enumerable collection of named source elements represented as a (string, TSource) Tuple.</param>
        /// <param name="operation">The operation to apply on each element.</param>
        /// <param name="degreeOfParallelism">The maxium number of concurrently executed parallel tasks.</param>
        /// <returns>Task of ISourcedTaskResult items, one for each input element.</returns>
        public static Task<IEnumerable<ISourcedTaskResult<TSource, TResult>>> WhenAllAsync<TSource, TResult>(this IEnumerable<(string name, TSource value)> source, Func<TSource, Task<TResult>> operation, int degreeOfParallelism)
            => source.ToNamedTaskFactories(operation).WhenAll(CancellationToken.None, degreeOfParallelism);

        /// <summary>
        /// Returns a task that completes when all the tasks generated by appliying the given function on each element of the enumerable source completes.
        /// </summary>
        /// <param name="source">The enumerable collection of named source elements represented as a (string, TSource) Tuple.</param>
        /// <typeparam name="TResult">The return type of the operation applied on each element.</typeparam>
        /// <param name="source">The enumerable collection of source elements.</param>
        /// <param name="operation">The operation to apply on each element.</param>
        /// <param name="degreeOfParallelism">The maxium number of concurrently executed parallel tasks.</param>
        /// <returns>Task of ISourcedTaskResult items, one for each input element.</returns>
        public static Task<IEnumerable<ISourcedTaskResult<TSource>>> WhenAllAsync<TSource>(this IEnumerable<(string name, TSource value)> source, Func<TSource, Task> operation, int degreeOfParallelism)
            => source.ToNamedTaskFactories(operation).WhenAll(CancellationToken.None, degreeOfParallelism);

        #endregion

        #region WhenAny

        public static Task<ISourcedTaskResult<TSource>> WhenAnyAsync<TSource>(this IEnumerable<TSource> source, Func<TSource, CancellationToken, Task> operation, CancellationToken cancellationToken)
            => source.ToNamedTaskFactories(operation).WhenAny(cancellationToken);

        public static Task<ISourcedTaskResult<TSource, TResult>> WhenAnyAsync<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, CancellationToken, Task<TResult>> operation, CancellationToken cancellationToken)
            => source.ToNamedTaskFactories(operation).WhenAny(cancellationToken);

        public static Task<ISourcedTaskResult<TSource>> WhenAnyAsync<TSource>(this IEnumerable<TSource> source, Func<TSource, Task> operation)
            => source.ToNamedTaskFactories(operation).WhenAny(CancellationToken.None);

        public static Task<ISourcedTaskResult<TSource, TResult>> WhenAnyAsync<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, Task<TResult>> operation)
            => source.ToNamedTaskFactories(operation).WhenAny(CancellationToken.None);

        public static Task<ISourcedTaskResult<TSource>> WhenAnyAsync<TSource>(this IEnumerable<(string name, TSource value)> source, Func<TSource, CancellationToken, Task> operation, CancellationToken cancellationToken)
            => source.ToNamedTaskFactories(operation).WhenAny(cancellationToken);

        public static Task<ISourcedTaskResult<TSource, TResult>> WhenAnyAsync<TSource, TResult>(this IEnumerable<(string name, TSource value)> source, Func<TSource, CancellationToken, Task<TResult>> operation, CancellationToken cancellationToken)
            => source.ToNamedTaskFactories(operation).WhenAny(cancellationToken);

        public static Task<ISourcedTaskResult<TSource>> WhenAnyAsync<TSource>(this IEnumerable<(string name, TSource value)> source, Func<TSource, Task> operation)
            => source.ToNamedTaskFactories(operation).WhenAny(CancellationToken.None);

        public static Task<ISourcedTaskResult<TSource, TResult>> WhenAnyAsync<TSource, TResult>(this IEnumerable<(string name, TSource value)> source, Func<TSource, Task<TResult>> operation)
            => source.ToNamedTaskFactories(operation).WhenAny(CancellationToken.None);

        #endregion

        #region WhenEach

#if NETSTANDARD2_PLUS

        public static IAsyncEnumerable<ISourcedTaskResult<TSource>> WhenEachAsync<TSource>(this IEnumerable<TSource> source, Func<TSource, CancellationToken, Task> operation, CancellationToken cancellationToken)
            => source.ToNamedTaskFactories(operation).WhenEach(cancellationToken, ParallelismOptions.DefaultDegreeOfParallelism);

        public static IAsyncEnumerable<ISourcedTaskResult<TSource, TResult>> WhenEachAsync<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, CancellationToken, Task<TResult>> operation, CancellationToken cancellationToken)
            => source.ToNamedTaskFactories(operation).WhenEach(cancellationToken, ParallelismOptions.DefaultDegreeOfParallelism);

        public static IAsyncEnumerable<ISourcedTaskResult<TSource>> WhenEachAsync<TSource>(this IEnumerable<TSource> source, Func<TSource, Task> operation)
            => source.ToNamedTaskFactories(operation).WhenEach(CancellationToken.None, ParallelismOptions.DefaultDegreeOfParallelism);

        public static IAsyncEnumerable<ISourcedTaskResult<TSource, TResult>> WhenEachAsync<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, Task<TResult>> operation)
            => source.ToNamedTaskFactories(operation).WhenEach(CancellationToken.None, ParallelismOptions.DefaultDegreeOfParallelism);

        public static IAsyncEnumerable<ISourcedTaskResult<TSource>> WhenEachAsync<TSource>(this IEnumerable<(string name, TSource value)> source, Func<TSource, CancellationToken, Task> operation, CancellationToken cancellationToken)
            => source.ToNamedTaskFactories(operation).WhenEach(cancellationToken, ParallelismOptions.DefaultDegreeOfParallelism);

        public static IAsyncEnumerable<ISourcedTaskResult<TSource, TResult>> WhenEachAsync<TSource, TResult>(this IEnumerable<(string name, TSource value)> source, Func<TSource, CancellationToken, Task<TResult>> operation, CancellationToken cancellationToken)
            => source.ToNamedTaskFactories(operation).WhenEach(cancellationToken, ParallelismOptions.DefaultDegreeOfParallelism);

        public static IAsyncEnumerable<ISourcedTaskResult<TSource>> WhenEachAsync<TSource>(this IEnumerable<(string name, TSource value)> source, Func<TSource, Task> operation)
            => source.ToNamedTaskFactories(operation).WhenEach(CancellationToken.None, ParallelismOptions.DefaultDegreeOfParallelism);

        public static IAsyncEnumerable<ISourcedTaskResult<TSource, TResult>> WhenEachAsync<TSource, TResult>(this IEnumerable<(string name, TSource value)> source, Func<TSource, Task<TResult>> operation)
            => source.ToNamedTaskFactories(operation).WhenEach(CancellationToken.None, ParallelismOptions.DefaultDegreeOfParallelism);

        public static IAsyncEnumerable<ISourcedTaskResult<TSource>> WhenEachAsync<TSource>(this IEnumerable<TSource> source, Func<TSource, CancellationToken, Task> operation, CancellationToken cancellationToken, int degreeOfParallelism)
            => source.ToNamedTaskFactories(operation).WhenEach(cancellationToken, degreeOfParallelism);

        public static IAsyncEnumerable<ISourcedTaskResult<TSource, TResult>> WhenEachAsync<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, CancellationToken, Task<TResult>> operation, CancellationToken cancellationToken, int degreeOfParallelism)
            => source.ToNamedTaskFactories(operation).WhenEach(cancellationToken, degreeOfParallelism);

        public static IAsyncEnumerable<ISourcedTaskResult<TSource>> WhenEachAsync<TSource>(this IEnumerable<TSource> source, Func<TSource, Task> operation, int degreeOfParallelism)
            => source.ToNamedTaskFactories(operation).WhenEach(CancellationToken.None, degreeOfParallelism);

        public static IAsyncEnumerable<ISourcedTaskResult<TSource, TResult>> WhenEachAsync<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, Task<TResult>> operation, int degreeOfParallelism)
            => source.ToNamedTaskFactories(operation).WhenEach(CancellationToken.None, degreeOfParallelism);

        public static IAsyncEnumerable<ISourcedTaskResult<TSource>> WhenEachAsync<TSource>(this IEnumerable<(string name, TSource value)> source, Func<TSource, CancellationToken, Task> operation, CancellationToken cancellationToken, int degreeOfParallelism)
            => source.ToNamedTaskFactories(operation).WhenEach(cancellationToken, degreeOfParallelism);

        public static IAsyncEnumerable<ISourcedTaskResult<TSource, TResult>> WhenEachAsync<TSource, TResult>(this IEnumerable<(string name, TSource value)> source, Func<TSource, CancellationToken, Task<TResult>> operation, CancellationToken cancellationToken, int degreeOfParallelism)
            => source.ToNamedTaskFactories(operation).WhenEach(cancellationToken, degreeOfParallelism);
        
        public static IAsyncEnumerable<ISourcedTaskResult<TSource>> WhenEachAsync<TSource>(this IEnumerable<(string name, TSource value)> source, Func<TSource, Task> operation, int degreeOfParallelism)
            => source.ToNamedTaskFactories(operation).WhenEach(CancellationToken.None, degreeOfParallelism);

        public static IAsyncEnumerable<ISourcedTaskResult<TSource, TResult>> WhenEachAsync<TSource, TResult>(this IEnumerable<(string name, TSource value)> source, Func<TSource, Task<TResult>> operation, int degreeOfParallelism)
            => source.ToNamedTaskFactories(operation).WhenEach(CancellationToken.None, degreeOfParallelism);

#endif

        #endregion

        #region Private Helpers

        private static IEnumerable<NamedSourcedTaskFactory<TSource, TResult>> ToNamedTaskFactories<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, CancellationToken, Task<TResult>> operation)
            => source.Select((x, i) => new NamedSourcedTaskFactory<TSource, TResult>(operation, x, null, i));

        private static IEnumerable<NamedSourcedTaskFactory<TSource>> ToNamedTaskFactories<TSource>(this IEnumerable<TSource> source, Func<TSource, CancellationToken, Task> operation)
            => source.Select((x, i) => new NamedSourcedTaskFactory<TSource>(operation, x, null, i));

        private static IEnumerable<NamedSourcedTaskFactory<TSource, TResult>> ToNamedTaskFactories<TSource, TResult>(this IEnumerable<(string name, TSource value)> source, Func<TSource, CancellationToken, Task<TResult>> operation)
            => source.Select((x, i) => new NamedSourcedTaskFactory<TSource, TResult>(operation, x.value, x.name, i));

        private static IEnumerable<NamedSourcedTaskFactory<TSource>> ToNamedTaskFactories<TSource>(this IEnumerable<(string name, TSource value)> source, Func<TSource, CancellationToken, Task> operation)
            => source.Select((x, i) => new NamedSourcedTaskFactory<TSource>(operation, x.value, x.name, i));

        private static IEnumerable<NamedSourcedTaskFactory<TSource, TResult>> ToNamedTaskFactories<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, Task<TResult>> operation)
            => source.Select((x, i) => new NamedSourcedTaskFactory<TSource, TResult>(operation, x, null, i));

        private static IEnumerable<NamedSourcedTaskFactory<TSource>> ToNamedTaskFactories<TSource>(this IEnumerable<TSource> source, Func<TSource, Task> operation)
            => source.Select((x, i) => new NamedSourcedTaskFactory<TSource>(operation, x, null, i));

        private static IEnumerable<NamedSourcedTaskFactory<TSource, TResult>> ToNamedTaskFactories<TSource, TResult>(this IEnumerable<(string name, TSource value)> source, Func<TSource, Task<TResult>> operation)
            => source.Select((x, i) => new NamedSourcedTaskFactory<TSource, TResult>(operation, x.value, x.name, i));

        private static IEnumerable<NamedSourcedTaskFactory<TSource>> ToNamedTaskFactories<TSource>(this IEnumerable<(string name, TSource value)> source, Func<TSource, Task> operation)
            => source.Select((x, i) => new NamedSourcedTaskFactory<TSource>(operation, x.value, x.name, i));

        #endregion
    }
}

